/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface SsContainerInline {
        /**
          * The first name
         */
        "idp": string;
    }
    interface SsContainerModal {
        /**
          * Classes override for custom styling
         */
        "classes"?: {
    modalWrapper?: string;
    modalOverlay?: string;
    modalHeader?: string;
    modalContent?: string;
    maxWidthContainer?: string;
  };
        /**
          * Should the modal be open
         */
        "open": boolean;
    }
    interface SsIconButton {
    }
}
export interface SsContainerModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSsContainerModalElement;
}
declare global {
    interface HTMLSsContainerInlineElement extends Components.SsContainerInline, HTMLStencilElement {
    }
    var HTMLSsContainerInlineElement: {
        prototype: HTMLSsContainerInlineElement;
        new (): HTMLSsContainerInlineElement;
    };
    interface HTMLSsContainerModalElement extends Components.SsContainerModal, HTMLStencilElement {
    }
    var HTMLSsContainerModalElement: {
        prototype: HTMLSsContainerModalElement;
        new (): HTMLSsContainerModalElement;
    };
    interface HTMLSsIconButtonElement extends Components.SsIconButton, HTMLStencilElement {
    }
    var HTMLSsIconButtonElement: {
        prototype: HTMLSsIconButtonElement;
        new (): HTMLSsIconButtonElement;
    };
    interface HTMLElementTagNameMap {
        "ss-container-inline": HTMLSsContainerInlineElement;
        "ss-container-modal": HTMLSsContainerModalElement;
        "ss-icon-button": HTMLSsIconButtonElement;
    }
}
declare namespace LocalJSX {
    interface SsContainerInline {
        /**
          * The first name
         */
        "idp": string;
    }
    interface SsContainerModal {
        /**
          * Classes override for custom styling
         */
        "classes"?: {
    modalWrapper?: string;
    modalOverlay?: string;
    modalHeader?: string;
    modalContent?: string;
    maxWidthContainer?: string;
  };
        /**
          * Callback when close button clicked  Closing of the modal should happen automatically, but this event will also be called  Call with onCloseClicked (using JSX) or ```const ssContainerModal = document.querySelector('ss-container-modal'); ssContainerModal.addEventListener('closeClicked', event => {  your listener })```
         */
        "onCloseClicked"?: (event: SsContainerModalCustomEvent<void>) => void;
        /**
          * Callback when refresh button clicked  Refresh will be handled automatically, but this event will also be called  Call with onCloseClicked (using JSX) or ```const ssContainerModal = document.querySelector('ss-container-modal'); ssContainerModal.addEventListener('refreshClicked', event => {  your listener })```
         */
        "onRefreshClicked"?: (event: SsContainerModalCustomEvent<void>) => void;
        /**
          * Should the modal be open
         */
        "open"?: boolean;
    }
    interface SsIconButton {
    }
    interface IntrinsicElements {
        "ss-container-inline": SsContainerInline;
        "ss-container-modal": SsContainerModal;
        "ss-icon-button": SsIconButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ss-container-inline": LocalJSX.SsContainerInline & JSXBase.HTMLAttributes<HTMLSsContainerInlineElement>;
            "ss-container-modal": LocalJSX.SsContainerModal & JSXBase.HTMLAttributes<HTMLSsContainerModalElement>;
            "ss-icon-button": LocalJSX.SsIconButton & JSXBase.HTMLAttributes<HTMLSsIconButtonElement>;
        }
    }
}
